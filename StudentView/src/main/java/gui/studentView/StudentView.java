/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gui.studentView;

import gui.dao.DAO;
import gui.dao.DAOException;
import gui.dao.DAOFactory;
import gui.dao.DAOFactoryException;
import gui.dao.DAOSQL;
import gui.dao.DAOTXT;
import gui.persona.Alumno;
import gui.persona.PersonaException;
import gui.student.mapper.AlumnoMapper;
import gui.studentView.dialog.AlumnoDialog;
import java.util.List;
import java.io.File;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.plaf.FileChooserUI;
import javax.swing.table.TableModel;

/**
 *
 * @author fiora
 */


public class StudentView extends javax.swing.JFrame {

    private DAO dao;
    private DAO daoSQL;
    private Alumno alumno;
    private List<Alumno> alumnosList;
    private static final int TIPO_TXT = 0;
    private static final int TIPO_SQL = 1;
    private Boolean stateSQL = false;

    public Boolean getStateSQL() {
        return stateSQL;
    }

    public void setStateSQL(Boolean stateSQL) {
        this.stateSQL = stateSQL;
    }
    
    /**
     * Creates new form StudentView
     */
    public StudentView() throws DAOException {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setTitle("Student view");
        initSQL();
        dao = new DAOTXT("alumnos.txt");
        jTextFieldFullPath.setText("alumnos.txt");
        
        //disableButtons();
        
        
        jTableAlumnos.setModel(defineAlumnoModel());
        jButtonBorrar.setEnabled(true);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableAlumnos = new javax.swing.JTable();
        jButtonCrear = new javax.swing.JButton();
        jButtonModificar = new javax.swing.JButton();
        jButtonConsultar = new javax.swing.JButton();
        jButtonBorrar = new javax.swing.JButton();
        jComboBoxFeed = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jButtonPicker = new javax.swing.JButton();
        jTextFieldFullPath = new javax.swing.JTextField();
        jCheckBoxAlumnosActivos = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTableAlumnos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTableAlumnos);

        jButtonCrear.setText("Crear");
        jButtonCrear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCrearActionPerformed(evt);
            }
        });

        jButtonModificar.setText("Modificar");
        jButtonModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonModificarActionPerformed(evt);
            }
        });

        jButtonConsultar.setText("Consultar");
        jButtonConsultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConsultarActionPerformed(evt);
            }
        });

        jButtonBorrar.setText("Borrar");
        jButtonBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBorrarActionPerformed(evt);
            }
        });

        jComboBoxFeed.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "TXT", "SQL" }));
        jComboBoxFeed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxFeedActionPerformed(evt);
            }
        });

        jLabel2.setText("Seleccione el repositorio");

        jButtonPicker.setText("...");
        jButtonPicker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPickerActionPerformed(evt);
            }
        });

        jTextFieldFullPath.setEditable(false);
        jTextFieldFullPath.setBackground(new java.awt.Color(204, 204, 204));

        jCheckBoxAlumnosActivos.setText("Solo activos");
        jCheckBoxAlumnosActivos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxAlumnosActivosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 545, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButtonModificar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonConsultar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonBorrar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonCrear, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jCheckBoxAlumnosActivos)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jTextFieldFullPath, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jComboBoxFeed, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(31, 31, 31)
                                .addComponent(jButtonPicker, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(96, 96, 96)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxFeed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jButtonPicker))
                .addGap(18, 18, 18)
                .addComponent(jTextFieldFullPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jCheckBoxAlumnosActivos, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButtonCrear)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonModificar)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonBorrar)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonConsultar)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonCrearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCrearActionPerformed
        AlumnoDialog alumnoDialog = new AlumnoDialog(this, true, AlumnoDialog.CREATE);
        alumnoDialog.setVisible(true);
        try {
            alumno = AlumnoMapper.dto2Alumno(alumnoDialog.getDto());
            //alumno.setFechaIng(LocalDate.now());
            dao.create(alumno);
            jTableAlumnos.setModel(defineAlumnoModel());
        } catch (PersonaException | DAOException ex) {
            Logger.getLogger(StudentView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "No se pudo crear el alumno",
                        "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        
        System.out.println("");
    }//GEN-LAST:event_jButtonCrearActionPerformed

    private void jButtonModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonModificarActionPerformed
        int rowSelected = jTableAlumnos.getSelectedRow();
        if(rowSelected < 0){
            JOptionPane.showMessageDialog(this, "No se ha seleccionado un alumno", "Error", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        Alumno alumno = getAlumnoSeleccionado(rowSelected);
        
        AlumnoDialog alumnoDialog = new AlumnoDialog(this, true, AlumnoDialog.UPDATE);
        alumnoDialog.setDto(AlumnoMapper.alumno2DTO(alumno));
        alumnoDialog.setVisible(true); //Cuando se cierra esto retoma
        getAlumnoSeleccionado(rowSelected).getEstado();
        //ver que hace el map
        //Map <String,String> configMap = new HashMap<>();
        //configMap.put(DAOFactory.TIPO_DAO, DAOFactory.TIPO_DAO_TXT);
        //String fullpath = jTextFieldFullPath.getText();
        //configMap.put(DAOFactory.FULL_PATH, fullpath);
        
        
        try {
            //DAO dao = DAOFactory.getInstance().crearDAO(null);
            alumno = AlumnoMapper.dto2Alumno(alumnoDialog.getDto());
            alumno.setFechaIng(LocalDate.now());
            dao.update(alumno);
            System.out.println("alumno a persistir ==> "+alumno.getDni() + "- "+alumno.getNombre()+ "- "+alumno.getFechaNac());
            jTableAlumnos.setModel(defineAlumnoModel());
        //} catch (DAOFactoryException | DAOException | PersonaException ex) {
        } catch (DAOException | PersonaException ex) {
            Logger.getLogger(StudentView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error al modificar (" + ex.getLocalizedMessage() + ")", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonModificarActionPerformed

    private void jButtonConsultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConsultarActionPerformed
        AlumnoDialog alumnoDialog = new AlumnoDialog(this, true, AlumnoDialog.READ);
        alumnoDialog.setVisible(true);
        try {
            List<Alumno> alumnosBuscados = new ArrayList();
            System.out.println("DNI BUSCADO: " + alumnoDialog.getDto().getDNI());
            Alumno alumnoBuscado = (Alumno) dao.findById(alumnoDialog.getDto().getDNI());
            if(alumnoBuscado == null){
                JOptionPane.showMessageDialog(this, "No se ha encontrado al alumno con ese DNI",
                        "ERROR", JOptionPane.ERROR_MESSAGE);
            }
            System.out.println("Alumno buscado: " + alumnoBuscado.getNombre());
            alumnosBuscados.add(alumnoBuscado);
            AlumnoTableModel alumnoModel = new AlumnoTableModel();
            alumnoModel.setAlumnos(alumnosBuscados);    
            jTableAlumnos.setModel(alumnoModel);
        } catch (DAOException ex) {
            Logger.getLogger(StudentView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "No se ha encontrado al alumno con ese DNI",
                        "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonConsultarActionPerformed

    private void jButtonBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBorrarActionPerformed
        int rowSelected = jTableAlumnos.getSelectedRow();
        if(rowSelected < 0){
            JOptionPane.showMessageDialog(this, "No se ha seleccionado un alumno", "Error", JOptionPane.INFORMATION_MESSAGE);
        }
        else{
            Alumno alumnoABorrar = getAlumnoSeleccionado(rowSelected);
            int resp = JOptionPane.showConfirmDialog(this, "¿Está seguro que quiere borrar al alumno con DNI: " + alumnoABorrar.getDni() + " ?"  ,"Confirmación de borrado",JOptionPane.OK_CANCEL_OPTION);
            if(resp == JOptionPane.OK_OPTION){
                try {
                    dao.delete((Integer)alumnoABorrar.getDni());
                    System.out.println("LLEGA A BORRAR");
                    jTableAlumnos.setModel(defineAlumnoModel());
                } catch (DAOException ex) {
                    JOptionPane.showMessageDialog(this, "Error al borrar al alumno", "Error", JOptionPane.ERROR_MESSAGE);
                    Logger.getLogger(StudentView.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            System.out.println("Se borra");
        }
    }//GEN-LAST:event_jButtonBorrarActionPerformed

    private Alumno getAlumnoSeleccionado(int rowSelected) {
        AlumnoTableModel alumnoTableModel = (AlumnoTableModel)jTableAlumnos.getModel();
        java.util.List<Alumno> alumnos = alumnoTableModel.getAlumnos();
        Alumno alumno = alumnos.get(rowSelected);
        return alumno;
    }

    private void jButtonPickerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPickerActionPerformed
        JFileChooser chooser = new JFileChooser();
        File projectRoot = new File(System.getProperty("user.dir"));
        chooser.setCurrentDirectory(projectRoot);
        int resp = chooser.showOpenDialog(this);
        if (resp !=  JFileChooser.APPROVE_OPTION) {
            return;
        }
        jTextFieldFullPath.setText(chooser.getSelectedFile().getAbsolutePath());
        jButtonCrear.setEnabled(true);
        jButtonModificar.setEnabled(true);
        jTableAlumnos.setModel(defineAlumnoModel());
    }//GEN-LAST:event_jButtonPickerActionPerformed

    private void jComboBoxFeedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxFeedActionPerformed
        if(jComboBoxFeed.getSelectedIndex()== TIPO_TXT){
            jTextFieldFullPath.setVisible(true);
            jButtonPicker.setVisible(true);
            String path = jTextFieldFullPath.getText();
            if(path != null && !path.isEmpty()){
                try {
                    dao = new DAOTXT(jTextFieldFullPath.getText());
                    System.out.println("Se coencto con TXT");
                     
                    jTableAlumnos.setModel(defineAlumnoModel());
                } catch (DAOException ex) {
                    Logger.getLogger(StudentView.class.getName()).log(Level.SEVERE, null, ex);
                    System.out.println("Se rompio la con txt");
                }
            }
        }
        else{
            jTextFieldFullPath.setVisible(false);
            jButtonPicker.setVisible(false);
            if(getStateSQL()){
                dao = daoSQL;
                jTableAlumnos.setModel(defineAlumnoModel());
            }
            else{
                JOptionPane.showMessageDialog(this, "La conección SQL no funciona, por favor use TXT", "Error", JOptionPane.INFORMATION_MESSAGE);
            }
        }
        
    }//GEN-LAST:event_jComboBoxFeedActionPerformed

    private void jCheckBoxAlumnosActivosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxAlumnosActivosActionPerformed
        jTableAlumnos.setModel(defineAlumnoModel());
        System.out.println(jCheckBoxAlumnosActivos.isSelected());
    }//GEN-LAST:event_jCheckBoxAlumnosActivosActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StudentView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StudentView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StudentView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StudentView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new StudentView().setVisible(true);
                } catch (DAOException ex) {
                    Logger.getLogger(StudentView.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonBorrar;
    private javax.swing.JButton jButtonConsultar;
    private javax.swing.JButton jButtonCrear;
    private javax.swing.JButton jButtonModificar;
    private javax.swing.JButton jButtonPicker;
    private javax.swing.JCheckBox jCheckBoxAlumnosActivos;
    private javax.swing.JComboBox<String> jComboBoxFeed;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableAlumnos;
    private javax.swing.JTextField jTextFieldFullPath;
    // End of variables declaration//GEN-END:variables

    private void disableButtons() {
        jButtonCrear.setEnabled(false);
        jButtonModificar.setEnabled(false);
        jButtonBorrar.setEnabled(false);
        jButtonConsultar.setEnabled(false);

    }

    private void initSQL() {
        try {
            daoSQL = new DAOSQL("jdbc:mysql://127.0.0.1:3306/universidad", "root", "root");
            setStateSQL(true);
        } catch (DAOException ex) {
            setStateSQL(false);
            Logger.getLogger(StudentView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void fillAlumnosList(Boolean filter) {
        try {
            if(filter){
                alumnosList = dao.findAllByEstado(true);
            }
            else{
                alumnosList = dao.findAllByEstado(false);
            }
        } catch (DAOException ex) {
            JOptionPane.showMessageDialog(this, "Error al cargar los alumnos, por favor intente cambiando el input de datos", "Error", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private TableModel defineAlumnoModel() {
        if(jCheckBoxAlumnosActivos.isSelected()){
            fillAlumnosList(true);
        } else{
            fillAlumnosList(false);
        }
        
        AlumnoTableModel alumnoModel = new AlumnoTableModel();
        alumnoModel.setAlumnos(alumnosList);    
        return alumnoModel;
    }
}
